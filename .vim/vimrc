
" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" {{{ colorstheme 
Plug 'morhetz/gruvbox'
" }}}

"{{{ editor 
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'ervandew/supertab'
Plug 'scrooloose/syntastic'
Plug 'tpope/vim-repeat'
Plug 'junegunn/vim-easy-align'
Plug 'tpope/vim-surround'

Plug 'easymotion/vim-easymotion'
Plug 'haya14busa/incsearch.vim'
Plug 'haya14busa/incsearch-fuzzy.vim'
Plug 'haya14busa/incsearch-easymotion.vim'
" }}}

" file manager
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'Xuyuanp/nerdtree-git-plugin'

"{{{ bar status 
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
"}}}


" Visualize and traverse your undo tree
Plug 'sjl/gundo.vim'
"shows a git diff in the 'gutter' (sign column) 
Plug 'airblade/vim-gitgutter'
" A buffer/file/mru/tag explorer with fuzzy text matching
Plug 'kien/ctrlp.vim'

" language support
" {{{ LaTeX 
Plug 'lervag/vimtex'
Plug 'LaTeX-Box-Team/LaTeX-Box'
" }}} 

" {{{ Markdown syntax highlighting for Vim	
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
" }}}


" Initialize plugin system
call plug#end()


"---package configuration---

" gundo{{{
":GundoToggle

" }}}

" {{{ incsearch fuzzy easymotion
	function! s:config_easyfuzzymotion(...) abort
  return extend(copy({
  \   'converters': [incsearch#config#fuzzyword#converter()],
  \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
  \   'keymap': {"\<CR>": '<Over>(easymotion)'},
  \   'is_expr': 0,
  \   'is_stay': 1
  \ }), get(a:, 1, {}))
endfunction

noremap <silent><expr> <Space>/ incsearch#go(<SID>config_easyfuzzymotion())
" }}}

" ctrlp {{{
set wildignore+=*/tmp/*,*.swp,*.zip,*.tar.gz 
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(out|o|mp4|pdf|epub|chm|png|jpg|gif)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
let g:ctrlp_working_path_mode = 'ra'
"}}}

" airline {{{
let g:airline_powerline_fonts = 1
let g:airline_theme="zenburn"
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
" unicode symbols
let g:airline_left_sep = '»'
"let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
"let g:airline_right_sep = '◀'
"let g:airline_symbols.linenr = '␊'
"let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
"let g:airline_symbols.paste = 'Þ'
"let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" }}}

"syntastic {{{
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_auto_jump = 1
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'

let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libc++'
let g:syntastic_python_checkers = ['pylint']
let g:syntastic_php_checkers = ['php']
" }}}

" Ultisnips {{{
let g:UltiSnipsExpandTrigger = '<TAB>'
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit='vertical'
let g:UltiSnipsSnippetsDir=$HOME.'/.vim/plugged/vim-snippets/UltiSnips'

" }}}

"let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'

" {{{ markdown
nmap <leader>md :%! ~/.vim/bin/Markdown.pl --html4tags <cr>
" }}}

" {{{ colorscheme
set background=dark
colorscheme gruvbox
let g:gruvbox_contrast_dark="hard"
" }}}

"---generel configuration---
filetype on
filetype plugin indent on
syntax on

set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1  "encoding dectection
set tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab
set history=5000
set wrap
let &showbreak = '↪'
set t_ti= t_te=  " Disable the \"clear\" after you close

if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

