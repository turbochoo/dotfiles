" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" looking {{{

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'airblade/vim-gitgutter'
Plug 'morhetz/gruvbox'

" }}}

" navigation{{{
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'wesleyche/SrcExpl'
Plug 'majutsushi/tagbar'
Plug 'kien/ctrlp.vim'
" }}} 

" completion/templating {{{

Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }

Plug 'roxma/nvim-completion-manager'
if !has('nvim')
Plug 'roxma/vim-hug-neovim-rpc'
endif


Plug 'jiangmiao/auto-pairs'
Plug 'scrooloose/nerdcommenter'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" }}}

" command extention {{{ 

Plug 'easymotion/vim-easymotion'
Plug 'junegunn/vim-easy-align'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'

Plug 'haya14busa/incsearch.vim'
Plug 'haya14busa/incsearch-fuzzy.vim'
Plug 'haya14busa/incsearch-easymotion.vim'

" }}}


" language support {{{

" html/css {{{
Plug 'mattn/emmet-vim'
" }}}

" c/c++
Plug 'roxma/ncm-clang'
Plug 'Rip-Rip/clang_complete'
" go 
Plug 'fatih/vim-go'   
" gdb

Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'idanarye/vim-vebugger'
" java
Plug 'artur-shaik/vim-javacomplete2'

" python {{{
Plug 'jmcantrell/vim-virtualenv'
Plug 'davidhalter/jedi-vim'
Plug 'hynek/vim-python-pep8-indent'

" }}}

"php {{{
" should install composer
" http://kushellig.de/neovim-php-ide/
Plug 'phpactor/phpactor', {'do': 'composer install'}
Plug 'roxma/ncm-phpactor'
"}}}

" syntax checking {{{
Plug 'w0rp/ale'

" }}}

" documentation {{{
" LaTeX 
Plug 'lervag/vimtex'
Plug 'LaTeX-Box-Team/LaTeX-Box'

" Markdown syntax highlighting for Vim	
Plug 'godlygeek/tabular'
Plug 'gabrielelana/vim-markdown'
Plug 'rhysd/nyaovim-markdown-preview'

" }}}

" utils{{{
Plug 'sjl/gundo.vim'
" scratchpad
Plug 'metakirby5/codi.vim'
Plug 'mattn/webapi-vim'
Plug 'mattn/gist-vim'
" }}}

" misc {{{
Plug 'kassio/neoterm'
Plug 'janko-m/vim-test'
Plug 'tpope/vim-dispatch'
" Testing Vimscript with Vader.vim
Plug 'junegunn/vader.vim'
Plug 'thinca/vim-quickrun'
Plug 'aperezdc/vim-template'
" }}}

" Initialize plugin system
call plug#end()

"---package configuration---

" vebugger {{{
	
" }}}

" nvim completion manager {{{
let g:python_host_prog = '/usr/bin/python2'
let g:python3_host_prog="/usr/bin/python3"
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
"}}}

" UltiSnips with ncm {{{
"
let g:UltiSnipsExpandTrigger		= "<Plug>(ultisnips_expand)"
let g:UltiSnipsJumpForwardTrigger	= "<c-j>"
let g:UltiSnipsJumpBackwardTrigger	= "<c-k>"
let g:UltiSnipsRemoveSelectModeMappings = 0
inoremap <silent> <C-Space> <C-R>=cm#sources#ultisnips#trigger_or_popup("\<Plug>(ultisnips_expand)")<CR>
let g:UltiSnipsEditSplit='vertical'
"let g:UltiSnipsSnippetsDir=["UltiSnips"]
" }}}

" ncm_clang {{{
autocmd BufEnter *.cpp,*.h,*.hpp,*.hxx let g:ale_cpp_clang_options = join(ncm_clang#compilation_info()['args'], ' ')

" }}}

" clang_complete {{{
let g:clang_library_path='/lib/libclang.so.6.0'
" default key mapping is annoying
    let g:clang_make_default_keymappings = 0
    " ncm-clang is auto detecting compile_commands.json and .clang_complete
    " file
    let g:clang_auto_user_options = ''
	let g:clang_snippets_engine = 'ultisnips'
    func WrapClangGoTo()
        let cwd = getcwd()
        let info = ncm_clang#compilation_info()
        exec 'cd ' . info['directory']
        try
            let b:clang_user_options = join(info['args'], ' ')
            call g:ClangGotoDeclaration()
        catch
        endtry
        " restore
        exec 'cd ' . cwd
    endfunc

    " map to gd key
    autocmd FileType c,cpp nnoremap <buffer> gd :call WrapClangGoTo()<CR>
"}}}
" nerdcommenter {{{
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDDefaultAlign = 'left'
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
" }}}
" Quickrun Setting
let g:quickrun_config = {
            \   "_" : {
            \       "outputter" : "error",
            \       "outputter/error/success"   : "buffer",
            \       "outputter/error/error"     : "quickfix",
            \       "outputter/buffer/close_on_empty" : 1,
            \       "hook/time/enable" : 1
            \   },
            \   "cpp" : {
			\		"command": "g++",
            \       "cmdopt" : "-std=c++11 -Wall -pedantic"
            \   },
            \}

let g:quickrun_no_default_key_mappings = 1
map <F5> :QuickRun<CR>

"c/c++ {{{
autocmd FileType Makefile setlocal sw=2 ts=2 noexpandtab

"}}}

"javacomplete2 {{{
	autocmd FileType java setlocal omnifunc=javacomplete#Complete
"}}}

" jedi-vim {{{
let g:jedi#auto_initialization = 1
let g:jedi#use_tabs_not_buffers = 1
let g:jedi#smart_auto_mappings = 0
let g:jedi#completions_enabled = 0
let g:jedi#goto_command = "<Leader>d"
let g:jedi#goto_definitions_command = ""
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>n"
let g:jedi#completions_command = ""
let g:jedi#rename_command = "<leader>r"

" }}}

" ALE {{{✘ ✗
"let g:ale_sign_error = '✖'
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '⚠'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

" (optional, for completion performance) run linters only when I save files
let g:ale_lint_on_enter = 0
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 'never'

let g:ale_set_loclist = 0
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0

let g:ale_linters = {
			\ 'html': ['HTMLHint'], 
			\ 'javascript': ['eslint'], 
			\ 'css': ['csslint'], 
			\ 'python': ['flake8'],
			\ 'cpp':["clang"]
			\ }
let g:ale_fixers = {
			\ 'javascript': ['prettier'], 
			\ 'scss': ['stylelint'], 
			\ 'python': ['yapf', 'isort']
			\ }
let g:ale_python_flake8_args = '--ignore=E501'

noremap <leader>f :ALEFix<cr>

" }}}

" incsearch fuzzy easymotion{{{ 
	function! s:config_easyfuzzymotion(...) abort
  return extend(copy({
  \   'converters': [incsearch#config#fuzzyword#converter()],
  \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
  \   'keymap': {"\<CR>": '<Over>(easymotion)'},
  \   'is_expr': 0,
  \   'is_stay': 1
  \ }), get(a:, 1, {}))
endfunction

noremap <silent><expr> <Space>/ incsearch#go(<SID>config_easyfuzzymotion())
" }}}

" ctrlp {{{
set wildignore+=*/tmp/*,*.swp,*.zip,*.tar.gz 
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(out|o|mp4|pdf|epub|chm|png|jpg|gif)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
let g:ctrlp_working_path_mode = 'ra'
"}}}

" markdown {{{
nmap <leader>md :%! ~/.vim/bin/Markdown.pl --html4tags <cr>
" }}}

" gist {{{
let g:gist_detect_filetype = 1
let g:gist_post_private = 1
let g:gist_post_anonymous = 0
" }}}

" neoterm{{{
"let g:neoterm_size = 15
"" }}}
"
"" vim-test{{
"let g:test#strategy = 'neoterm'
"let g:test#preserve_screen = 1
"
"nmap <silent> <leader>f :TestNearest<CR>
"nmap <silent> <leader>i :TestFile<CR>
"nmap <silent> <leader>a :TestSuite<CR>
"nmap <silent> <leader>l :TestLast<CR>
"nmap <silent> <leader>g :TestVisit<CR>
"
"let test#python#pytest#options = {
"  \ 'nearest': '-v',
"  \ 'file':    '-v',
"  \ 'suite':   '-v',
"\}

" }}

" airline {{{
let g:airline_powerline_fonts = 1
let g:airline_theme="zenburn"
" enable tab
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1

let g:airline#extensions#virtualenv#enabled = 1
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#ale#error_symbol = 'E:'
let g:airline#extensions#ale#warning_symbol = 'W:'
" unicode symbols
let g:airline_left_sep = '»'
let g:airline_right_sep = '«'

" }}}

" nerdtree {{{ 
let g:nerdtree_tabs_open_on_console_startup = 0
let NERDChristmasTree=1
let NERDTreeShowHidden=0
let NERDTreeQuitOnOpen=1 
let NERDTreeShowBookmarks=1 
let NERDTreeDirArrows=1 
let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', 
			\ '\.swp$', '\.git', '\.hg', '\.svn','\.bzr',
			\ '\.out']
map <F8> :NERDTreeToggle<CR>
" }}}

" tab & pane {{{
" command reference

" Move to the previous buffer with "gp"
nnoremap gp :bp<CR>
" Move to the next buffer with "gn"
nnoremap gn :bn<CR>
" List all possible buffers with "gl"
nnoremap gl :ls<CR>
" List all possible buffers with "gb" and accept a new buffer argument [1]
nnoremap gb :ls<CR>:b

"E784: Cannot close last tab page
"nnoremap <leader>w :tabclose<CR>
"You can specify the new split height by prefixing with a number:10sp
"Create a vertical split using :vsp and horizontal with :sp
"Max out the height of the current split
"ctrl + w _
"Max out the width of the current split
"ctrl + w |
"Normalize all split sizes, which is very handy when resizing terminal
"ctrl + w =
"Swap top/bottom or left/right split
"Ctrl+W R
"Break out current window into a new tabview
"Ctrl+W T
"Close every window in the current tabview but the current one
"Ctrl+W o

set splitbelow
set splitright

"switch focus between panes(buffers)
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"panel to tab
function! MoveToPrevTab()
  "there is only one window
  if tabpagenr('$') == 1 && winnr('$') == 1
    return
  endif
  "preparing new window
  let l:tab_nr = tabpagenr('$')
  let l:cur_buf = bufnr('%')
  if tabpagenr() != 1
    close!
    if l:tab_nr == tabpagenr('$')
      tabprev
    endif
    sp
  else
    close!
    exe "0tabnew"
  endif
  "opening current buffer in new window
  exe "b".l:cur_buf
endfunc

function! MoveToNextTab()
  "there is only one window
  if tabpagenr('$') == 1 && winnr('$') == 1
    return
  endif
  "preparing new window
  let l:tab_nr = tabpagenr('$')
  let l:cur_buf = bufnr('%')
  if tabpagenr() < tab_nr
    close!
    if l:tab_nr == tabpagenr('$')
      tabnext
    endif
    sp
else
    close!
    tabnew
  endif
  "opening current buffer in new window
  exe "b".l:cur_buf
endfunc
nnoremap mt :call MoveToNextTab()<cr>
nnoremap mT :call MoveToPrevTab()<cr>

"}}}

" {{{ colorscheme
set t_Co=256
set mouse=a
set background=dark
colorscheme gruvbox
let g:gruvbox_contrast_dark="hard"
" }}}

"---generel configuration---
filetype on
filetype plugin indent on
syntax on

set nowritebackup
set noswapfile
set nobackup
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1  "encoding dectection
set tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab
set history=5000
set wrap
let &showbreak = '↪'
" Show invisibles
set listchars=tab:▸\ ,eol:¬
set list
set ignorecase
set smartcase
set incsearch
"doesn't work in neovim
set t_ti= t_te=  " Disable the \"clear\" after you close

" Tab completion in command mode
set wildmenu
set wildmode=full
set wildignore+=.hg,.git,.svn
set wildignore+=*.aux,*.out,*.toc
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg
set wildignore+=*.pdf
set wildignore+=*.dat
set wildignore+=*.o,*.so
set wildignore+=*.pyc
set wildignore+=*.sw?
set wildignore+=*.DS_Store?
set wildignore+=venv
set wildignore+=*.fits,*.hdf5,*.h5

if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

